/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TableContract {
  export type RecordStruct = { id: BigNumberish; data: string };

  export type RecordStructOutput = [id: bigint, data: string] & {
    id: bigint;
    data: string;
  };
}

export interface TableContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createRecord"
      | "deleteRecord"
      | "getAllRecords"
      | "getRecord"
      | "updateRecord"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RecordCreated" | "RecordDeleted" | "RecordUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createRecord",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllRecords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRecord",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRecord",
    data: BytesLike
  ): Result;
}

export namespace RecordCreatedEvent {
  export type InputTuple = [id: BigNumberish, data: string];
  export type OutputTuple = [id: bigint, data: string];
  export interface OutputObject {
    id: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordDeletedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordUpdatedEvent {
  export type InputTuple = [id: BigNumberish, data: string];
  export type OutputTuple = [id: bigint, data: string];
  export interface OutputObject {
    id: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TableContract extends BaseContract {
  connect(runner?: ContractRunner | null): TableContract;
  waitForDeployment(): Promise<this>;

  interface: TableContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createRecord: TypedContractMethod<[data: string], [void], "nonpayable">;

  deleteRecord: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getAllRecords: TypedContractMethod<
    [],
    [TableContract.RecordStructOutput[]],
    "view"
  >;

  getRecord: TypedContractMethod<
    [id: BigNumberish],
    [[bigint, string]],
    "view"
  >;

  updateRecord: TypedContractMethod<
    [id: BigNumberish, data: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createRecord"
  ): TypedContractMethod<[data: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteRecord"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllRecords"
  ): TypedContractMethod<[], [TableContract.RecordStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getRecord"
  ): TypedContractMethod<[id: BigNumberish], [[bigint, string]], "view">;
  getFunction(
    nameOrSignature: "updateRecord"
  ): TypedContractMethod<
    [id: BigNumberish, data: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RecordCreated"
  ): TypedContractEvent<
    RecordCreatedEvent.InputTuple,
    RecordCreatedEvent.OutputTuple,
    RecordCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RecordDeleted"
  ): TypedContractEvent<
    RecordDeletedEvent.InputTuple,
    RecordDeletedEvent.OutputTuple,
    RecordDeletedEvent.OutputObject
  >;
  getEvent(
    key: "RecordUpdated"
  ): TypedContractEvent<
    RecordUpdatedEvent.InputTuple,
    RecordUpdatedEvent.OutputTuple,
    RecordUpdatedEvent.OutputObject
  >;

  filters: {
    "RecordCreated(uint256,string)": TypedContractEvent<
      RecordCreatedEvent.InputTuple,
      RecordCreatedEvent.OutputTuple,
      RecordCreatedEvent.OutputObject
    >;
    RecordCreated: TypedContractEvent<
      RecordCreatedEvent.InputTuple,
      RecordCreatedEvent.OutputTuple,
      RecordCreatedEvent.OutputObject
    >;

    "RecordDeleted(uint256)": TypedContractEvent<
      RecordDeletedEvent.InputTuple,
      RecordDeletedEvent.OutputTuple,
      RecordDeletedEvent.OutputObject
    >;
    RecordDeleted: TypedContractEvent<
      RecordDeletedEvent.InputTuple,
      RecordDeletedEvent.OutputTuple,
      RecordDeletedEvent.OutputObject
    >;

    "RecordUpdated(uint256,string)": TypedContractEvent<
      RecordUpdatedEvent.InputTuple,
      RecordUpdatedEvent.OutputTuple,
      RecordUpdatedEvent.OutputObject
    >;
    RecordUpdated: TypedContractEvent<
      RecordUpdatedEvent.InputTuple,
      RecordUpdatedEvent.OutputTuple,
      RecordUpdatedEvent.OutputObject
    >;
  };
}
